# -*- coding: utf-8 -*-
"""Notebook_Analisis_del_rendimiento_ABipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16nzJmGFEtXvhE3gdPIZUuxu5LSqwIiQi

<h1 style="text-align: center; font-weight: bold;">üìä An√°lisis del rendimiento de Atl√©tico Bucaramanga</h1>
<h2 style="text-align: center;">Comparaci√≥n entre entrenadores: Dudamel, Florent√≠n y Leonel</h2>

---

## üéØ Introducci√≥n

El objetivo de este an√°lisis es comparar el rendimiento de Atl√©tico Bucaramanga bajo tres entrenadores distintos: **Rafael Dudamel, Gustavo Florent√≠n y Leonel √Ålvarez**.  

Se estudiar√°n m√©tricas relacionadas con:
- Goles a favor y en contra.
- Resultados (victoria, empate, derrota).
- Diferencia de gol.
- Rendimiento en condici√≥n de **local** y **visitante**.

Los datos fueron obtenidos desde la p√°gina **FBref** y se procesaron con Python (Pandas, Matplotlib, Seaborn).

#**‚öôÔ∏è Preparaci√≥n del entorno**
Primero se importan las librerias necesarias para el an√°lisis que se llevar√° acabo:

- **pandas**: para la manipulaci√≥n y an√°lisis de datos.
- **seaborn** y **matplotlib**: para la visualizaci√≥n de datos.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""## üßæ Metodolog√≠a

El an√°lisis se estructura de la siguiente manera:

1. **Fuente de datos**: Se utiliza la base p√∫blica de **FBref**, que contiene estad√≠sticas de partidos oficiales.  
2. **Alcance**: Se incluyen partidos de Liga y torneos internacionales; no se incluyen partidos de Copa Colombia.  
3. **Procesamiento**:
   - Se cre√≥ una funci√≥n en Python (`load_and_clear`) para limpiar y estandarizar los datos.  
   - Se seleccionaron solo columnas relevantes (fecha, resultado, goles, rival, condici√≥n de local/visitante).  
4. **Segmentaci√≥n**: Los partidos se dividieron seg√∫n el entrenador responsable:
   - Rafael Dudamel (2024)  
   - Gustavo Florent√≠n (2025, hasta el partido vs Pereira)  
   - Leonel √Ålvarez (2025, despu√©s de Florent√≠n)  
5. **M√©tricas calculadas**: Goles a favor/en contra, diferencia de gol, porcentaje de victorias/empates/derrotas y rendimiento local/visitante.

## üßπ Funci√≥n de carga y limpieza de datos

Se define la funci√≥n `load_and_clear(url)`, que realiza las siguientes tareas:

1. **Carga** los datos desde la p√°gina de FBref a partir de una URL.
2. **Selecciona** solo las columnas relevantes (fecha, competencia, lugar, resultado, goles a favor/en contra, rival).
3. **Convierte** los valores de goles a tipo num√©rico (en caso de que est√©n como texto).
4. **Elimina** filas con valores faltantes en goles.
5. **Transforma** la columna `Date` a formato de fecha para facilitar el an√°lisis temporal.

Esta funci√≥n se reutilizar√° para cargar y preparar los datos de cada entrenador.
"""

def load_and_clear(url):
  df = pd.read_html(url, header=1)[0]
  if 'Round' in df.columns and 'Comp' not in df.columns:
    df.rename(columns={'Round': 'Comp'}, inplace=True)
  df = df[['Date', 'Comp','Venue','Result','GF', 'GA', 'Opponent']].copy()
  #Convert data type
  if(df['GF'].dtype == object):
    for col in ['GF', 'GA']:
        df[col] = df[col].str.extract(r"(\d+)")
        df[col] = df[col].replace("NaN", pd.NA)
        df[col] = df[col].astype("Int64")
  else:
    df = df.dropna(subset=['GF','GA'])
    df[['GA', 'GF']] = df[['GA','GF']].astype(int)
  #Filter data
  df = df.dropna()
  df['Date'] = pd.to_datetime(df['Date'])
  return df

"""## üì• Carga de los datos de partidos

Con la funci√≥n `load_and_clear()` se cargan los datos de los partidos del Atl√©tico Bucaramanga desde la p√°gina de **FBref**.

üëâ El dataset incluye partidos de **Liga** y de **torneos internacionales**, pero **no contempla los partidos de Copa Colombia**.  


Se realiza la separaci√≥n en tres etapas correspondientes a cada entrenador:

- **Rafael Dudamel** ‚Üí Temporada 2024 (Primera A).  
- **Gustavo Florent√≠n** ‚Üí Inicio de la temporada 2025 hasta el partido contra **Pereira**.  
- **Leonel √Ålvarez** ‚Üí Resto de la temporada 2025 despu√©s de Florent√≠n.  

De esta forma, podremos comparar m√©tricas y resultados de manera diferenciada para cada proceso.

"""

#Extract data season 2025
df = load_and_clear('https://fbref.com/en/squads/9b9a8c22/2025/matchlogs/all_comps/misc/CA-Bucaramanga-Match-Logs-All-Competitions')
#Select data for Florentin
df_florentin = df.loc[:(df.index[df['Opponent']== 'Pereira'][0])].copy()
#Select data for Leonel
df_leonel = df.loc[~df.index.isin(df_florentin.index)].copy()
#Select and filter data for Dudamel
df_dudamel = load_and_clear('https://fbref.com/en/squads/9b9a8c22/2024/matchlogs/c41/misc/CA-Bucaramanga-Match-Logs-Primera-A')

"""## ‚öΩ C√°lculo de goles a favor y en contra

Para cada entrenador se calculan:

- **Goles a favor (GF)**: total de goles marcados en todos los partidos de su etapa.  
- **Goles en contra (GA)**: total de goles recibidos.  
- **Frecuencia de goles**: se estima cu√°ntos minutos pasan, en promedio, entre cada gol a favor y cada gol en contra.  

üëâ Esto permite comparar no solo la cantidad total de goles, sino tambi√©n la **eficiencia ofensiva y defensiva** de cada proceso.

"""

#Calculate GF/GA
GF_florentin = df_florentin['GF'].sum()
GA_floretin = df_florentin['GA'].sum()
GF_leonel = df_leonel['GF'].sum()
GA_leonel = df_leonel['GA'].sum()
GF_dudamel = df_dudamel['GF'].sum()
GA_dudamel = df_dudamel['GA'].sum()
total_minutes_dudamel = len(df_dudamel)*90
total_minutes_florentin = len(df_florentin)*90
total_minutes_leonel = len(df_leonel)*90
GF_per_minute_dudamel = total_minutes_dudamel/GF_dudamel
GF_per_minute_florentin = total_minutes_florentin/GF_florentin
GF_per_minute_leonel = total_minutes_leonel/GF_leonel
GA_per_minute_dudamel = total_minutes_dudamel/GA_dudamel
GA_per_minute_florentin = total_minutes_florentin/GA_floretin
GA_per_minute_leonel = total_minutes_leonel/GA_leonel
print(f"Dudamel\nGoles a favor cada: {GF_per_minute_dudamel:.3f} minutos\nGoles en contra cada: {GA_per_minute_dudamel:.3f} minutos\n")
print(f"Florentin\nGoles a favor cada: {GF_per_minute_florentin} minutos\nGoles en contra cada: {GA_per_minute_florentin} minutos\n")
print(f"Leonel\nGoles a favor cada: {GF_per_minute_leonel:.3f} minutos\nGoles en contra cada: {GA_per_minute_leonel:.3f} minutos\n")

"""## üìä Distribuci√≥n de resultados

En esta secci√≥n se contabilizan los resultados de cada entrenador:

- **Victorias (W)**  
- **Empates (D)**  
- **Derrotas (L)**  

Con esta informaci√≥n se calcula el **porcentaje de cada tipo de resultado** sobre el total de partidos dirigidos por cada entrenador.  

üëâ Esto nos permite identificar tendencias generales, por ejemplo, si un entrenador fue m√°s propenso a empatar, perder o ganar durante su ciclo.

"""

#amount of each result for each coach
#Dudamel coach
win_dudamel  = len(df_dudamel[df_dudamel['Result'] == 'W'])
draw_dudamel = len(df_dudamel[df_dudamel['Result'] == 'D'])
defeat_dudamel = len(df_dudamel[df_dudamel['Result'] == 'L'])
#Florentin coach
win_florentin  = len(df_florentin[df_florentin['Result'] == 'W'])
draw_florentin = len(df_florentin[df_florentin['Result'] == 'D'])
defeat_florentin = len(df_florentin[df_florentin['Result'] == 'L'])
#Leonel coach
win_leonel  = len(df_leonel[df_leonel['Result'] == 'W'])
draw_leonel = len(df_leonel[df_leonel['Result'] == 'D'])
defeat_leonel = len(df_leonel[df_leonel['Result'] == 'L'])
#Percentage by matches
#Dudamel
win_percentage_dudamel = (win_dudamel/len(df_dudamel))*100
draw_percentage_dudamel = (draw_dudamel/len(df_dudamel))*100
defeat_percentage_dudamel = (defeat_dudamel/len(df_dudamel))*100
#florentin
win_percentage_florentin = (win_florentin/len(df_florentin))*100
draw_percentage_florentin = (draw_florentin/len(df_florentin))*100
defeat_percentage_florentin  = (defeat_florentin/len(df_florentin))*100
#leonel
win_percentage_leonel = (win_leonel/len(df_leonel))*100
draw_percentage_leonel = (draw_leonel/len(df_leonel))*100
defeat_percentage_leonel = (defeat_leonel/len(df_leonel))*100

"""## üìâ Visualizaci√≥n de la distribuci√≥n de resultados

Para cada entrenador se calcul√≥ el porcentaje de partidos **ganados, empatados y perdidos**.  

La siguiente gr√°fica de barras muestra la comparaci√≥n:  

- **Eje X** ‚Üí tipo de resultado (ganados, empatados, perdidos).  
- **Eje Y** ‚Üí porcentaje respecto al total de partidos dirigidos.  
- **Colores**:
  - Verde = victorias  
  - Gris = empates  
  - Rojo = derrotas  

üëâ Esta visualizaci√≥n permite observar r√°pidamente qu√© entrenador obtuvo mayor proporci√≥n de victorias y cu√°l tuvo m√°s derrotas o empates.

"""

fig, ax = plt.subplots(1,3,figsize=(15,5), sharey = True)
etiquetas = ["Ganados", "Empatados", "Perdidos"]
ax[0].bar(etiquetas,[win_percentage_dudamel, draw_percentage_dudamel, defeat_percentage_dudamel],color=["#89ff29","#9a9c98","#ea4335"])
ax[1].bar(etiquetas,[win_percentage_florentin, draw_percentage_florentin, defeat_percentage_florentin],color=["#89ff29","#9a9c98","#ea4335"])
ax[2].bar(etiquetas,[win_percentage_leonel, draw_percentage_leonel, defeat_percentage_leonel],color=["#89ff29","#9a9c98","#ea4335"])
for a in ax:
  a.set_ylabel('Distribuci√≥n de resultados (%)')
  a.bar_label(a.containers[0], fmt="%.1f%%", label_type="edge", padding=2)

ax[0].set_title("Dudamel")
ax[1].set_title("Florentin")
ax[2].set_title("Leonel")
plt.tight_layout()
plt.show()

"""## ‚öñÔ∏è Diferencia de gol (GD)

La **diferencia de gol (GD)** se obtiene restando los goles en contra (GA) a los goles a favor (GF).  

Se calculan dos m√©tricas:  
- **GD total**: diferencia de gol acumulada durante toda la etapa de cada entrenador.  
- **GD din√°mica (cumsum)**: diferencia de gol acumulada partido a partido, lo que permite observar la evoluci√≥n del equipo a lo largo del tiempo.

"""

#Calculate Goal Diference (GD)
GD_dudamel = GF_dudamel - GA_dudamel
GD_florentin = GF_florentin - GA_floretin
GD_leonel = GF_leonel - GA_leonel
print(f"Diferencia de Gol de cada etapa \nDudamel: {GD_dudamel}\nFlorentin: {GD_florentin}\nLeonel: {GD_leonel}")

#Save the dynamic goal difference (match-to-match) in the data frame
df_dudamel['GD'] = (df_dudamel['GF'] - df_dudamel['GA']).cumsum()
df_florentin['GD'] = (df_florentin['GF'] - df_florentin['GA']).cumsum()
df_leonel['GD'] = (df_leonel['GF'] - df_leonel['GA']).cumsum()

"""## üèüÔ∏è Rendimiento local vs visitante

Se dividen los partidos seg√∫n la condici√≥n de **local** o **visitante**.  

Esto permite calcular m√©tricas diferenciadas (victorias, empates, derrotas, rendimiento) en funci√≥n del lugar donde se jug√≥ el partido.  

üëâ Con este an√°lisis se busca identificar si el Bucaramanga mostr√≥ un comportamiento distinto cuando jugaba en casa frente a cuando jugaba fuera.

"""

#Data separated by home or away match
df_dudamel_home = df_dudamel[df_dudamel['Venue'] == "Home"]
df_dudamel_away = df_dudamel[df_dudamel['Venue'] == "Away"]
df_florentin_home = df_florentin[df_florentin['Venue'] == "Home"]
df_florentin_away = df_florentin[df_florentin['Venue'] == "Away"]
df_leonel_home = df_leonel[df_leonel['Venue'] == "Home"]
df_leonel_away = df_leonel[df_leonel['Venue'] == "Away"]
win_dudamel_home = len(df_dudamel_home[df_dudamel_home['Result'] == 'W'])
draw_dudamel_home = len(df_dudamel_home[df_dudamel_home['Result'] == 'D'])
win_dudamel_away = len(df_dudamel_away[df_dudamel_away['Result'] == 'W'])
draw_dudamel_away = len(df_dudamel_away[df_dudamel_away['Result'] == 'D'])
win_florentin_home = len(df_florentin_home[df_florentin_home['Result'] == 'W'])
draw_florentin_home = len(df_florentin_home[df_florentin_home['Result'] == 'D'])
win_florentin_away = len(df_florentin_away[df_florentin_away['Result'] == 'W'])
draw_florentin_away = len(df_florentin_away[df_florentin_away['Result'] == 'D'])
win_leonel_home = len(df_leonel_home[df_leonel_home['Result'] == 'W'])
draw_leonel_home = len(df_leonel_home[df_leonel_home['Result'] == 'D'])
win_leonel_away = len(df_leonel_away[df_leonel_away['Result'] == 'W'])
draw_leonel_away = len(df_leonel_away[df_leonel_away['Result'] == 'D'])

"""## üìà Rendimiento seg√∫n puntos obtenidos

El **rendimiento** es una m√©trica com√∫n en el f√∫tbol colombiano que mide la eficiencia de un equipo para sumar puntos.  

Se calcula con la f√≥rmula:

$$
\text{Rendimiento (%)} = \frac{(\text{Partidos ganados} \times 3) + (\text{Partidos empatados} \times 1)}{\text{Total de partidos} \times 3} \times 100
$$

De esta forma, se obtiene el porcentaje de puntos logrados frente al total posible.

En las siguientes gr√°ficas se compara el rendimiento de Bucaramanga bajo cada entrenador en tres escenarios:

- **Local** üèüÔ∏è ‚Üí Partidos jugados en casa.  
- **Visitante** ‚úàÔ∏è ‚Üí Partidos jugados fuera de casa.  
- **Total** ‚öΩ ‚Üí Promedio general de toda la etapa.  

üëâ Esto permite observar diferencias de desempe√±o seg√∫n la condici√≥n de juego y comparar la eficiencia de cada proceso.

"""

#Performance = (matches won *3 + tied matches)*100/(all matches*3)
performance_dudamel_all = (((win_dudamel*3) + draw_dudamel)/(len(df_dudamel)*3))*100
performance_dudamel_home = (((win_dudamel_home*3) + draw_dudamel_home)/(len(df_dudamel_home)*3))*100
performance_dudamel_away = (((win_dudamel_away*3) + draw_dudamel_away)/(len(df_dudamel_away)*3))*100
performance_florentin_all = (((win_florentin*3) + draw_florentin)/(len(df_florentin)*3))*100
performance_florentin_home = (((win_florentin_home*3) + draw_florentin_home)/(len(df_florentin_home)*3))*100
performance_florentin_away = (((win_florentin_away*3) + draw_florentin_away)/(len(df_florentin_away)*3))*100
performance_leonel_all = (((win_leonel*3) + draw_leonel)/(len(df_leonel)*3))*100
performance_leonel_home = (((win_leonel_home*3) + draw_leonel_home)/(len(df_leonel_home)*3))*100
performance_leonel_away = (((win_leonel_away*3) + draw_leonel_away)/(len(df_leonel_away)*3))*100

#Performance charts
fig, ax = plt.subplots(1,3,figsize=(15,5), sharey=True)
etiquetas = ['Local', 'Visitante', 'Total']
ax[0].bar(etiquetas, [performance_dudamel_home, performance_dudamel_away, performance_dudamel_all], color=['#f4fc0a', 'green','#f4fc0a'])
ax[0].set_title('Rendimiento de Dudamel')
ax[1].bar(etiquetas, [performance_florentin_home, performance_florentin_away, performance_florentin_all], color=['#f4fc0a', 'green','#f4fc0a'])
ax[1].set_title('Rendimiento de Florentin')
ax[2].bar(etiquetas, [performance_leonel_home, performance_leonel_away, performance_leonel_all], color=['#f4fc0a', 'green','#f4fc0a'])
ax[2].set_title('Rendimiento de Leonel')

for a in ax:
  a.set_ylabel('Rendimiento seg√∫n puntos obtenidos (%)')
  a.bar_label(a.containers[0], fmt="%.1f%%", label_type="edge", padding=1)

"""## üìâ Evoluci√≥n de goles a lo largo del tiempo

En esta secci√≥n se visualiza la evoluci√≥n de los goles de Atl√©tico Bucaramanga bajo cada entrenador:  

- **Goles a favor (GF)** ‚Üí promedio m√≥vil de 3 partidos, en color verde.  
- **Goles en contra (GA)** ‚Üí promedio m√≥vil de 3 partidos, en color rojo.  
- **Diferencia de gol (GD)** ‚Üí l√≠nea discontinua azul, acumulada partido a partido.  

üëâ Esta representaci√≥n permite identificar tendencias ofensivas y defensivas en cada proceso, como rachas de victorias, ca√≠das de rendimiento o mejoras puntuales en defensa/ataque.

"""

#Goal evolution graphs
fig, ax = plt.subplots(3,1,figsize=(15,8), sharey=True)
ax[0].plot(df_dudamel['Date'], df_dudamel["GF"].rolling(window=3).mean(), color="green", label="Goles a favor")
ax[0].plot(df_dudamel['Date'], df_dudamel['GA'].rolling(window=3).mean(), color="red", label="Goles en contra")
ax[0].plot(df_dudamel['Date'], df_dudamel['GD'], color="blue", label="Diferencia de gol", linestyle="--")
ax[0].legend()
ax[0].set_title("Ciclo Dudamel")
plt.xticks(rotation=45)

ax[1].plot(df_florentin['Date'], df_florentin["GF"].rolling(window=3).mean(), color="green", label="Goles a favor")
ax[1].plot(df_florentin['Date'], df_florentin['GA'].rolling(window=3).mean(), color="red", label="Goles en contra")
ax[1].plot(df_florentin['Date'], df_florentin['GD'], color="blue", label="Diferencia de gol", linestyle="--")
ax[1].legend()
ax[1].set_title("Ciclo Florentin")
plt.xticks(rotation=45)

ax[2].plot(df_leonel['Date'], df_leonel["GF"].rolling(window=3).mean(), color="green", label="Goles a favor")
ax[2].plot(df_leonel['Date'], df_leonel['GA'].rolling(window=3).mean(), color="red", label="Goles en contra")
ax[2].plot(df_leonel['Date'], df_leonel['GD'], color="blue", label="Diferencia de gol", linestyle="--")
ax[2].legend()
ax[2].set_title("Ciclo Leonel")
for a in ax:
    a.tick_params(axis="x", rotation=45)
    a.set_ylabel("Promedio goles (ventana=3)")

plt.subplots_adjust(hspace=0.6)

"""## ‚úÖ Conclusiones

### ‚öΩ Frecuencia de goles convertidos  
- **Leonel √Ålvarez** ‚Üí Etapa m√°s ofensiva y efectiva: **1 gol cada 56 minutos**.  
- **Rafael Dudamel** ‚Üí Producci√≥n intermedia: **1 gol cada ~80 minutos**.  
- **Gustavo Florent√≠n** ‚Üí Etapa m√°s pobre: **1 gol cada 240 minutos** (m√°s de 2 partidos y medio).  

---

### üõ°Ô∏è Solidez defensiva  
- **Dudamel**: El m√°s s√≥lido en defensa ‚Üí **1 gol recibido cada 125 minutos** (casi un partido y medio).  
- **Leonel y Florent√≠n**: Rendimientos similares ‚Üí goles en contra cada **81 y 80 minutos**, respectivamente.  

---

### üìä Diferencia de gol (GD)  
- **Leonel**: Compens√≥ su defensa con una gran **capacidad ofensiva**.  
- **Dudamel**: Lider√≥ en **diferencia de gol** gracias a su solidez defensiva.  
- **Florent√≠n**: Muy por debajo en este aspecto.  

---

### üèüÔ∏è Rendimiento local vs visitante  
- **Local** ‚Üí Dudamel (60.9%) y Leonel (60.0%) con desempe√±o fuerte y muy parejo.  
- **Visitante** ‚Üí Leonel tom√≥ ventaja (53.8%) sobre Dudamel (50.7%).  
- **Florent√≠n**: Baj√≠simo rendimiento tanto de local como de visitante.  

---

### üîé Comparaci√≥n global de procesos  
- **Leonel vs Dudamel** ‚Üí Paridad general:  
  - Leonel lidera en **rendimiento global** (**57.1% vs 55.8%**).  
  - Dudamel se impone en **defensa y diferencia de gol**.  
  - Leonel compensa con su **gran ofensiva**.  
- **Florent√≠n** ‚Üí Etapa m√°s d√©bil, con peores resultados en todas las m√©tricas.  

"""